generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER // Обычный пользователь - может создавать игры и быть игроком
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  // Связи
  createdGames Game[] @relation("GameCreator")
  players      Player[] // Изменено: связь с Player вместо TeamMember
  profile      UserProfile?
}

model UserProfile {
  id          String   @id @default(uuid())
  avatar      String?  // URL аватара
  bio         String?  // Описание пользователя
  rating      Int      @default(0) // Рейтинг пользователя
  gamesPlayed Int      @default(0) // Количество сыгранных игр
  gamesWon    Int      @default(0) // Количество выигранных игр
  
  // Связи
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique // Один профиль на пользователя
}

enum GameRole {
  GAME_MASTER // Ведущий
  CONTESTANT  // Изменено: Участник игры (вместо PLAYER)
}

model Game {
  id            String        @id @default(uuid())
  title         String
  isActive      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Связи
  creator       User          @relation("GameCreator", fields: [creatorId], references: [id])
  creatorId     String
  categories    Category[]
  questionRows  QuestionRow[]
  gameSessions  GameSession[] // Связь с сессиями (может быть несколько сессий одной игры)
}

// Изменено: Team и TeamMember заменены на Player
model Player {
  id          String   @id @default(uuid())
  name        String   // Отображаемое в игре имя (может отличаться от имени пользователя)
  points      Int      @default(0)
  role        GameRole @default(CONTESTANT)
  
  // Связи
  gameSession GameSession @relation(fields: [gameSessionId], references: [id])
  gameSessionId String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  // Вопросы, на которые ответил этот игрок
  answeredQuestions GameSessionQuestion[]
}

model GameSession {
  id            String               @id @default(uuid())
  startedAt     DateTime             @default(now())
  endedAt       DateTime?
  currentTurn   String?              // ID игрока, чей сейчас ход
  
  // Связи
  game          Game                 @relation(fields: [gameId], references: [id])
  gameId        String               // Убрано @unique, т.к. у игры может быть несколько сессий
  players       Player[]             // Игроки, участвующие в этой сессии
  
  // Состояние вопросов в этой сессии
  questions     GameSessionQuestion[]
}

model GameSessionQuestion {
  id            String      @id @default(uuid())
  isRevealed    Boolean     @default(false) // Был ли вопрос открыт
  isAnswered    Boolean     @default(false) // Был ли дан ответ
  
  // Связи
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id])
  gameSessionId String
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    String
  
  // Кто ответил на вопрос в этой сессии
  answeredBy       Player?  @relation(fields: [answeredByPlayerId], references: [id])
  answeredByPlayerId String?
  
  @@unique([gameSessionId, questionId])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  order     Int       // Позиция категории для отображения
  
  // Связи
  game      Game      @relation(fields: [gameId], references: [id])
  gameId    String
  questions Question[]
}

model QuestionRow {
  id        String    @id @default(uuid())
  value     Int       // Стоимость вопросов в этом ряду (100, 200, 300...)
  order     Int       // Порядок отображения ряда
  
  // Связи
  game      Game      @relation(fields: [gameId], references: [id])
  gameId    String
  questions Question[]
}

model Question {
  id         String    @id @default(uuid())
  question   String
  answer     String
  
  // Связи
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String
  
  // Связь с рядом вопросов
  questionRow  QuestionRow @relation(fields: [rowId], references: [id])
  rowId        String
  
  // Связь с сессией игры
  gameSessionQuestion GameSessionQuestion[]
  
  // Уникальное ограничение - один вопрос на пересечении категории и ряда
  @@unique([categoryId, rowId])
}