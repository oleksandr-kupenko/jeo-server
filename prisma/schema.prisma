generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  name         String
  password     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  role         SystemRole   @default(USER)
  createdGames Game[]       @relation("GameCreator")
  players      Player[]
  profile      UserProfile?
  roles        UserRole[]
}

model UserProfile {
  id          String  @id @default(uuid())
  avatar      String?
  bio         String?
  rating      Int     @default(0)
  gamesPlayed Int     @default(0)
  gamesWon    Int     @default(0)
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model UserRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model Game {
  id           String        @id @default(uuid())
  title        String
  isActive     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  creatorId    String
  categories   Category[]
  creator      User          @relation("GameCreator", fields: [creatorId], references: [id])
  gameSessions GameSession[]
  questionRows QuestionRow[]
}

model Player {
  id                String                @id @default(uuid())
  name              String
  points            Int                   @default(0)
  role              GameRole              @default(CONTESTANT)
  gameSessionId     String
  userId            String?
  socketId          String?
  status            String                @default("offline")
  answeredQuestions GameSessionQuestion[]
  gameSession       GameSession           @relation(fields: [gameSessionId], references: [id])
  user              User?                 @relation(fields: [userId], references: [id])
}

model GameSession {
  id                String                @id @default(uuid())
  startedAt         DateTime              @default(now())
  endedAt           DateTime?
  currentTurn       String?
  gameId            String
  numberOfAiPlayers Int                   @default(0) @db.SmallInt
  numberOfPlayers   Int                   @default(3) @db.SmallInt
  defaultTimer      Int                   @default(30) @db.SmallInt
  name              String
  game              Game                  @relation(fields: [gameId], references: [id])
  questions         GameSessionQuestion[]
  players           Player[]

  // Виртуальное поле для роли пользователя (не хранится в БД)
  /// @zod.custom.omit([])
  /// @zod.custom.transform(z.string().default('player'))
  userRole          String?              @default("player") @map("_userRole") @ignore
}

model GameSessionQuestion {
  id                 String      @id @default(uuid())
  isRevealed         Boolean     @default(false)
  isAnswered         Boolean     @default(false)
  gameSessionId      String
  questionId         String
  answeredByPlayerId String?
  answeredBy         Player?     @relation(fields: [answeredByPlayerId], references: [id])
  gameSession        GameSession @relation(fields: [gameSessionId], references: [id])
  question           Question    @relation(fields: [questionId], references: [id])

  @@unique([gameSessionId, questionId])
}

model Category {
  id        String     @id @default(uuid())
  name      String
  order     Int
  gameId    String
  game      Game       @relation(fields: [gameId], references: [id])
  questions Question[]
}

model QuestionRow {
  id        String     @id @default(uuid())
  value     Int
  order     Int
  gameId    String
  questions Question[]
  game      Game       @relation(fields: [gameId], references: [id])
}

model Question {
  id                  String                @id @default(uuid())
  question            String
  answer              String
  categoryId          String
  rowId               String
  gameSessionQuestion GameSessionQuestion[]
  category            Category              @relation(fields: [categoryId], references: [id])
  questionRow         QuestionRow           @relation(fields: [rowId], references: [id])

  @@unique([categoryId, rowId])
}

enum SystemRole {
  ADMIN
  USER
}

enum GameRole {
  GAME_MASTER
  CONTESTANT
}
